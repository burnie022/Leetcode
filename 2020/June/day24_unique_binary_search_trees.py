"""
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
"""
# When n is 1, there is 1 unique BST, when n is 2 there are 2. n is 3, 5 BST's. n is 4, 14 BST's, n = 5, 42 BST's.
# The sequence generated by n is known as the Catalan numbers. One formula to computer the nth Cataln number is:
# ((2n)!)/((n+1)!n!). This function uses this formula to compute the output for the nth number.
import math

def numTrees(n: int) -> int:
    if n < 0: return 1
    return (math.factorial(2 * n)) // (math.factorial(n + 1) * math.factorial(n))


# For testing
tests = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
for t in tests:
    print("n is:", t, ", BST's:", numTrees(t))

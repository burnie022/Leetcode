"""
A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example,
101 and 1100 are deci-binary, while 112 and 3001 are not.

Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers
needed so that they sum up to n.

Example 1:
    Input: n = "32"
    Output: 3
    Explanation: 10 + 11 + 11 = 32
Example 2:
    Input: n = "82734"
    Output: 8
Example 3:
    Input: n = "27346209830709182346"
    Output: 9

Constraints:
    1 <= n.length <= 105
    n consists of only digits.
    n does not contain any leading zeros and represents a positive integer.
Hint #1
    Think about if the input was only one digit. Then you need to add up as many ones as the value of this digit.
Hint #2
    If the input has multiple digits, then you can solve for each digit independently, and merge the answers to form
    numbers that add up to that input.
Hint #3
    Thus the answer is equal to the max digit.
"""


class Solution:
    def minPartitions(self, n: str) -> int:
        return max(set(n))

    # def minPartitions(self, n: str) -> int:
    #     count = 0
    #     while n != "0":
    #         count += 1
    #         decibinary = []
    #         for c in n:
    #             decibinary.append("0" if c < "1" else "1")
    #         n = str(int(n) - int("".join(decibinary)))
    #
    #     return count



# Test cases
obj = Solution()

tests = [
"32",
"82734",
"27346209830709182346",
    "1",
"27346209830709182346",
"27346209838709182346",
"2734629983070998234623579075764",
"273462098307091823462456546",
"27346209830709182346545835234434653546",
    "22",
    "23",
    "24"

]

for t in tests:
    print(f"\"{t}\"")
    # print(obj.minPartitions(t), end="\n\n")


# for i in range(10):
#     print(str(i) < "1")
# print(int("001"))

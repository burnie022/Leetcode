"""
Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result
should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b

Example 1:
    Input: arr = [1,2,3,4,5], k = 4, x = 3
    Output: [1,2,3,4]
Example 2:
    Input: arr = [1,2,3,4,5], k = 4, x = -1
    Output: [1,2,3,4]

Constraints:
    1 <= k <= arr.length
    1 <= arr.length <= 10^4
    arr is sorted in ascending order.
    -10^4 <= arr[i], x <= 10^4
"""
from typing import List
from bisect import bisect_left


class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        if k == len(arr):
            return arr
        i = bisect_left(arr, x)
        if i == 0 or i == len(arr):
            return arr[:k] if i == 0 else arr[-k:]
        hi = i - 1 if abs(x - arr[i-1]) <= abs(x - arr[i]) else i
        if hi + k - 1 >= len(arr):
            hi = len(arr) - k
        lo = max(0, i - k)
        while lo < hi:
            mid = lo + ((hi - lo) // 2)
            if mid + k < len(arr) and abs(x - arr[mid]) > abs(x - arr[mid+k]):
                lo = mid + 1
            elif mid > 0 and mid+k-1 < len(arr) and abs(x - arr[mid-1]) <= abs(x - arr[mid+k-1]):
                hi = mid
            else:
                return arr[mid:mid+k] if mid+k-1 < len(arr) else arr[-k:]

        return arr[lo:lo + k] if lo + k - 1 < len(arr) else arr[-k:]


if __name__ == "__main__":
    obj = Solution()
    tests = [
        ([1,2,3,4,5], 4, 3),
        ([1,2,3,4,5], 4, -1),
        ([1,3,4,8,10,12,15,19,23,26,30], 7, 11),
        ([1,3,4,8,10,12,15,18,23,26,30], 7, 11),
        ([1,3,4,8,10,12,15,20,23,26,30], 7, 11),
        ([1,1,1,10,10,10], 1, 9),
        ([1,1,1,10,10,10], 6, 9),
        ([1,1,1,10,10,10], 3, 9),
        ([1,1,1,10,10,10], 2, 9),
        ([1,2,3,100,101,102], 3, 99),
        ([1,2,3,100,101], 3, 99),
        ([1,2,3,100,101], 3, 10),
        ([2,3,100,101], 3, 10),
        ([0,1,1,1,2,3,6,7,8,9], 9, 4),
        ([1,3], 1, 2),
        (
            [-1499, -1488, -1479, -1455, -1441, -1425, -1423, -1417, -1411, -1405, -1395, -1386, -1384, -1377, -1328,
             -1320, -1318, -1306, -1287, -1277, -1271, -1268, -1256, -1253, -1246, -1245, -1201, -1184, -1165, -1163,
             -1147, -1130, -1090, -1071, -1058, -1038, -1019, -1013, -1005, -986, -985, -960, -945, -944, -936, -928,
             -926, -915, -910, -881, -877, -875, -874, -870, -862, -856, -838, -833, -831, -821, -820, -802, -792, -787,
             -771, -764, -762, -751, -748, -665, -658, -641, -630, -607, -604, -585, -563, -526, -518, -486, -453, -423,
             -421, -420, -406, -403, -396, -393, -392, -380, -375, -338, -335, -316, -289, -287, -265, -260, -258, -242,
             -233, -215, -206, -202, -190, -182, -178, -171, -164, -151, -144, -130, -123, -111, -98, -95, -94, -77,
             -67, -38, -33, -21, -13, 10, 26, 39, 44, 48, 55, 79, 80, 89, 113, 129, 135, 155, 177, 182, 185, 209, 211,
             215, 226, 230, 276, 284, 293, 299, 316, 341, 356, 366, 378, 391, 400, 401, 413, 415, 424, 425, 433, 456,
             469, 476, 491, 513, 540, 543, 545, 549, 551, 559, 568, 570, 590, 604, 615, 629, 651, 659, 667, 676, 699,
             744, 746, 761, 780, 785, 800, 806, 812, 823, 824, 830, 846, 852, 855, 873, 879, 893, 898, 923, 927, 938,
             942, 945, 960, 967, 980, 987, 994, 998, 1023, 1033, 1034, 1035, 1055, 1060, 1070, 1079, 1081, 1088, 1094,
             1099, 1103, 1111, 1131, 1133, 1135, 1145, 1154, 1158, 1171, 1187, 1193, 1198, 1202, 1207, 1209, 1226, 1230,
             1232, 1240, 1249, 1254, 1262, 1263, 1265, 1282, 1290, 1301, 1304, 1306, 1317, 1325, 1344, 1361, 1383, 1398,
             1407, 1414, 1419, 1454, 1458, 1474, 1489, 1494],
            9,
            50
        ),
        (
            [-1499, -1488, -1479, -1455, -1441, -1425, -1423, -1417, -1411, -1405, -1395, -1386, -1384, -1377, -1328,
             -1320, -1318, -1306, -1287, -1277, -1271, -1268, -1256, -1253, -1246, -1245, -1201, -1184, -1165, -1163,
             -1147, -1130, -1090, -1071, -1058, -1038, -1019, -1013, -1005, -986, -985, -960, -945, -944, -936, -928,
             -926, -915, -910, -881, -877, -875, -874, -870, -862, -856, -838, -833, -831, -821, -820, -802, -792, -787,
             -771, -764, -762, -751, -748, -665, -658, -641, -630, -607, -604, -585, -563, -526, -518, -486, -453, -423,
             -421, -420, -406, -403, -396, -393, -392, -380, -375, -338, -335, -316, -289, -287, -265, -260, -258, -242,
             -233, -215, -206, -202, -190, -182, -178, -171, -164, -151, -144, -130, -123, -111, -98, -95, -94, -77,
             -67, -38, -33, -21, -13, 10, 26, 39, 44, 48, 55, 79, 80, 89, 113, 129, 135, 155, 177, 182, 185, 209, 211,
             215, 226, 230, 276, 284, 293, 299, 316, 341, 356, 366, 378, 391, 400, 401, 413, 415, 424, 425, 433, 456,
             469, 476, 491, 513, 540, 543, 545, 549, 551, 559, 568, 570, 590, 604, 615, 629, 651, 659, 667, 676, 699,
             744, 746, 761, 780, 785, 800, 806, 812, 823, 824, 830, 846, 852, 855, 873, 879, 893, 898, 923, 927, 938,
             942, 945, 960, 967, 980, 987, 994, 998, 1023, 1033, 1034, 1035, 1055, 1060, 1070, 1079, 1081, 1088, 1094,
             1099, 1103, 1111, 1131, 1133, 1135, 1145, 1154, 1158, 1171, 1187, 1193, 1198, 1202, 1207, 1209, 1226, 1230,
             1232, 1240, 1249, 1254, 1262, 1263, 1265, 1282, 1290, 1301, 1304, 1306, 1317, 1325, 1344, 1361, 1383, 1398,
             1407, 1414, 1419, 1454, 1458, 1474, 1489, 1494],
            10,
            1480
        )
    ]

    for t in tests:
        for i in t:
            print(i)
        # print(obj.findClosestElements(*t), end="\n\n")


    # from random import randint
    # def gen_test():
    #     li = []
    #     for i in range(-1500, 1500):
    #         if not randint(0,10):
    #             li.append(i)
    #     print(li)
    # gen_test()
